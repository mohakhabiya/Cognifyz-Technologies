# -*- coding: utf-8 -*-
"""Cognifyz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSZZFxBrlHnOHlZ3Pp4lnZRT1m23LuKr

**Cognifyz Technologies**

# **Level 1**
"""

import pandas as pd
import numpy as np

df=pd.read_csv('Dataset .csv')
df

"""# **Task: Top Cuisines**

**Determine the top three most common cuisines in the dataset.**
"""

top_cuisines=df['Cuisines'].value_counts().nlargest(3)
print("Top three most common cuisines :",top_cuisines)

"""**Calculate the percentage of restaurants that serve each of the top cuisines.**"""

total_res=len(df)
per_cui=(top_cuisines / total_res) * 100
print("Percentage of restaurants that serve each of the top cuisines:",per_cui)

"""# **Task: City Analysis**

**Identify the city with the highest number of restaurants in the dataset.**
"""

ctres_count=df['City'].value_counts().idxmax()
print("City with the highest number of restaurants:", ctres_count)

"""**Calculate the average rating for
restaurants in each city.**
"""

result=df[df['Rating text']=='Average'].groupby('City')['Rating text'].count().reset_index()
columns='City','Count_of_Average_Ratings'
print(result)

"""**Determine the city with the highest average rating.**"""

city_with_max_average_ratings=result.loc[result['Rating text'].idxmax()]
print(city_with_max_average_ratings)

"""# **Task3: Price Range Distribution**

**Create a histogram or bar chart to
visualize the distribution of price ranges
among the restaurants.**
"""

price_range=df['Price range'].value_counts()
price_range.plot(kind='bar', color='gray', edgecolor='black')
plt.title('Distribution of Price Ranges Among Restaurants')
plt.xlabel('Price Range')
plt.ylabel('Number of Restaurants')
plt.show()

"""**Calculate the percentage of restaurants
in each price range category.**
"""

TR=len(df)
perprice_range=(price_range/TR)*100
print("Percentage of restaurants in each price range category:",perprice_range)

"""# **Task: Online Delivery**

**Determine the percentage of restaurants
that offer online delivery.**
"""

TR=len(df)
res_online=len(df[df['Has Online delivery'] == 'Yes'])
per_onlinedel=(res_online / TR) * 100
print(f"Percentage of restaurants that offer online delivery: {per_onlinedel:.2f}%")

"""**Compare the average ratings of restaurants
with and without online delivery.**
"""

rating_map={"Excellent": 5,"Very Good": 4,"Good": 3,"Average": 2,"Not rated": 0}
df['numerical_rating']=df['Rating text'].map(rating_map)
averat_with_del=df[df['Has Online delivery']=='Yes']['numerical_rating'].mean()
averat_without_del=df[df['Has Online delivery']=='No']['numerical_rating'].mean()
print(f"Average rating of restaurants with online delivery: {averat_with_del:.2f}")
print(f"Average rating of restaurants without online delivery: {averat_without_del:.2f}")

"""# **Level 2**
# **Task: Restaurant Ratings**

**Analyze the distribution of aggregate
ratings and determine the most common
rating range.**
"""

bins=[0,1,2,3,4,5]
labels=['0-1','1-2','2-3','3-4','4-5']
df['Rating Range']=pd.cut(df['Aggregate rating'],bins=bins,labels=labels,include_lowest=True)
rating_distribution = df['Rating Range'].value_counts().sort_index()
rating_distribution.plot(kind='bar',color='gray',edgecolor='black')
plt.title('Distribution of Aggregate Ratings Among Restaurants')
plt.xlabel('Rating Range')
plt.ylabel('Number of Restaurants')
plt.show()
most_common_rating_range = rating_distribution.idxmax()
print(f"The most common rating range is: {most_common_rating_range}")

"""**Calculate the average number of votes
received by restaurants.**
"""

average_votes=df['Votes'].mean()
print(f"The average number of votes received by restaurants is: {average_votes:.2f}")

"""# **Task: Cuisine Combination**
**Identify the most common combinations of
cuisines in the dataset.**

**Determine if certain cuisine combinations tend to have higher ratings.**



"""

from itertools import combinations
from collections import Counter

df['Cuisines']=df['Cuisines'].astype(str)

df['Cuisines'] = df['Cuisines'].apply(lambda x: x.split(', '))

# Identify the most common combinations of cuisines
cuisine_combinations = []
for cuisines in df['Cuisines']:
    if len(cuisines) > 1:
        cuisine_combinations.extend(combinations(cuisines, 2))

cuisine_combination_counts = Counter(cuisine_combinations)
most_common_combinations = cuisine_combination_counts.most_common(10)
print("Most common combinations of cuisines:")
for combo, count in most_common_combinations:
    print(f"{combo}: {count}")

# Define a mapping for Rating text to numerical values
rating_mapping = {"Excellent": 5,"Very Good": 4,"Good": 3,"Average": 2,"Not rated": 0}

df['numerical_rating'] = df['Rating text'].map(rating_mapping)

# Calculate the average rating for each cuisine combination
combination_ratings = {}
for combo in cuisine_combination_counts:
    combo_df = df[df['Cuisines'].apply(lambda x: set(combo).issubset(set(x)))]
    average_rating = combo_df['numerical_rating'].mean()
    combination_ratings[combo] = average_rating

# Sort the combinations by average rating
sorted_combinations = sorted(combination_ratings.items(),key=lambda x: x[1], reverse=True)
print("\nCuisine combinations with the highest average ratings:")
for combo, rating in sorted_combinations[:10]:
    print(f"{combo}: {rating:.2f}")

"""#**Task: Geographic Analysis**
**Plot the locations of restaurants on a
map using longitude and latitude
coordinates.**

"""

longitude = df['Longitude']
latitude = df['Latitude']
plt.figure(figsize=(10, 6))
plt.scatter(longitude, latitude, c='blue', marker='o', alpha=0.5)
plt.title('Restaurant Locations')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

"""**Identify any patterns or clusters of
restaurants in specific areas.**
"""

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import pandas as pd

longitude = df['Longitude']
latitude = df['Latitude']

coordinates = pd.DataFrame({'Longitude': longitude, 'Latitude': latitude})

kmeans = KMeans(n_clusters=4, random_state=0).fit(coordinates)
df['Cluster'] = kmeans.labels_

plt.figure(figsize=(10, 6))
plt.scatter(df['Longitude'], df['Latitude'], c=df['Cluster'], cmap='viridis', marker='o', alpha=0.5)
plt.title('Restaurant Clusters')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

"""# **Task 4**
# **Task: Restaurant Chains**
**Identify if there are any restaurant chains
present in the dataset.**
"""

restaurant_counts = df['Restaurant Name'].value_counts().reset_index()
restaurant_counts.columns = ['Restaurant Name', 'Count']
restaurant_chains = restaurant_counts[restaurant_counts['Count'] > 1]
print(restaurant_chains)

"""**Analyze the ratings and popularity of
different restaurant chains.**
"""

chain_analysis = df.groupby('Restaurant Name').agg({'Aggregate rating': 'mean', 'Votes': 'sum'}).reset_index()

chain_analysis = chain_analysis.sort_values(by='Votes', ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(chain_analysis['Restaurant Name'], chain_analysis['Aggregate rating'], color='skyblue')
plt.xlabel('Restaurant Chain')
plt.ylabel('Average Rating')
plt.title('Average Ratings of Restaurant Chains')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(chain_analysis['Restaurant Name'], chain_analysis['Votes'], color='skyblue')
plt.xlabel('Restaurant Chain')
plt.ylabel('Total Number of Reviews')
plt.title('Popularity of Restaurant Chains (Total Number of Reviews)')
plt.xticks(rotation=90)
plt.show()

"""# **Level 3**
# **Task 1**
# **Task: Restaurant Reviews**
**Analyze the text reviews to identify the most
common positive and negative keywords.**
"""

import re
from collections import Counter
import matplotlib.pyplot as plt
from nltk.corpus import stopwords, opinion_lexicon
from nltk.tokenize import word_tokenize
from wordcloud import WordCloud

def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    words = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    words = [word for word in words if word not in stop_words]
    return words

df['Processed Review'] = df['Rating text'].apply(preprocess_text)

positive_words = set(opinion_lexicon.positive())
negative_words = set(opinion_lexicon.negative())

all_pos_words = []
all_neg_words = []

for words in df['Processed Review']:
    for word in words:
        if word in positive_words:
            all_pos_words.append(word)
        elif word in negative_words:
            all_neg_words.append(word)


pos_word_freq = Counter(all_pos_words)
neg_word_freq = Counter(all_neg_words)

print("Most common positive words:", pos_word_freq.most_common(5))
print("Most common negative words:", neg_word_freq.most_common(5))

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.bar(*zip(*pos_word_freq.most_common(5)))
plt.title('Positive Words')

plt.subplot(1, 2, 2)
plt.bar(*zip(*neg_word_freq.most_common(5)))
plt.title('Negative Words')

plt.tight_layout()
plt.show()

pos_wordcloud = WordCloud(width=400, height=200, background_color='white').generate_from_frequencies(pos_word_freq)
neg_wordcloud = WordCloud(width=400, height=200, background_color='white').generate_from_frequencies(neg_word_freq)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(pos_wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Positive Word Cloud')

plt.subplot(1, 2, 2)
plt.imshow(neg_wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Negative Word Cloud')

plt.tight_layout()
plt.show()

"""**Calculate the average length of reviews and
explore if there is a relationship between
review length and rating.**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df['Review Length'] = df['Rating text'].apply(len)

average_review_length = df['Review Length'].mean()
print(f"Average review length: {average_review_length:.2f} characters")

plt.scatter(df['Review Length'], df['Aggregate rating'], alpha=0.7)
plt.title('Review Length vs Rating')
plt.xlabel('Review Length (characters)')
plt.ylabel('Aggregate rating')
plt.grid(True)
plt.show()

correlation = df['Review Length'].corr(df['Aggregate rating'])
print(f"Correlation between review length and rating: {correlation:.2f}")

"""# **Task 2**
# **Task: Votes Analysis**
**Identify the restaurants with the highest and
lowest number of votes.**
"""

import pandas as pd


# Identify the restaurant with the highest number of votes
highest_votes_index = df['Votes'].idxmax()
restaurant_highest_votes = df.loc[highest_votes_index]

# Identify the restaurant with the lowest number of votes
lowest_votes_index = df['Votes'].idxmin()
restaurant_lowest_votes = df.loc[lowest_votes_index]

print("Restaurant with the highest number of votes:")
print(restaurant_highest_votes)
print("\nRestaurant with the lowest number of votes:")
print(restaurant_lowest_votes)

"""**Analyze if there is a correlation between the
number of votes and the rating of a
restaurant.**
"""

correlation = df['Votes'].corr(df['Aggregate rating'])

print(f"Correlation between Votes and Rating: {correlation:.2f}")

plt.figure(figsize=(10, 10))
plt.scatter(df['Votes'], df['Aggregate rating'], color='Black', alpha=0.6)
plt.title('Correlation between Votes and Rating')
plt.xlabel('Number of Votes')
plt.ylabel('Aggregate rating')
plt.grid(True)
plt.show()

"""# **Task 3**
# **Task: Price Range vs. Online Delivery and Table Booking**
**Analyze if there is a relationship between the
price range and the availability of online
delivery and table booking.**
"""

df.head(3)

df['Has Online delivery']

df['Has Table booking']

df['Has Online delivery'] = df['Has Online delivery'].map({'Yes': True, 'No': False})
df['Has Table booking'] = df['Has Table booking'].map({'Yes': True, 'No': False})

price_group = df.groupby('Price range').agg({
    'Has Online delivery': 'mean',
    'Has Table booking': 'mean'
}).reset_index()

price_group['Has Online delivery'] = price_group['Has Online delivery'] * 100
price_group['Has Table booking'] = price_group['Has Table booking'] * 100

print(price_group)

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.bar(price_group['Price range'], price_group['Has Online delivery'], color='blue', alpha=0.7)
plt.title('Percentage of Restaurants with Online Delivery by Price Range')
plt.xlabel('Price Range')
plt.ylabel('Percentage (%)')
plt.ylim(0, 100)

plt.subplot(1, 2, 2)
plt.bar(price_group['Price range'], price_group['Has Table booking'], color='green', alpha=0.7)
plt.title('Percentage of Restaurants with Table Booking by Price Range')
plt.xlabel('Price Range')
plt.ylabel('Percentage (%)')
plt.ylim(0, 100)

plt.tight_layout()
plt.show()

"""**Determine if higher-priced restaurants are
more likely to offer these services.**
"""

higher_price_ranges = price_group[price_group['Price range'] >= 3]
lower_price_ranges = price_group[price_group['Price range'] < 3]

avg_online_delivery_high = higher_price_ranges['Has Online delivery'].mean()
avg_table_booking_high = higher_price_ranges['Has Table booking'].mean()

avg_online_delivery_low = lower_price_ranges['Has Online delivery'].mean()
avg_table_booking_low = lower_price_ranges['Has Table booking'].mean()

print(f"Average percentage of online delivery in higher-priced restaurants: {avg_online_delivery_high:.2f}%")
print(f"Average percentage of table booking in higher-priced restaurants: {avg_table_booking_high:.2f}%")
print(f"Average percentage of online delivery in lower-priced restaurants: {avg_online_delivery_low:.2f}%")
print(f"Average percentage of table booking in lower-priced restaurants: {avg_table_booking_low:.2f}%")

# Visualization
plt.figure(figsize=(10, 5))

plt.bar(price_group['Price range'], price_group['Has Online delivery'], color='blue', alpha=0.7, label='Online Delivery')
plt.bar(price_group['Price range'], price_group['Has Table booking'], color='green', alpha=0.7, label='Table Booking', bottom=price_group['Has Online delivery'])

plt.title('Percentage of Restaurants Offering Services by Price Range')
plt.xlabel('Price range')
plt.ylabel('Percentage (%)')
plt.ylim(0, 100)
plt.legend()

plt.show()